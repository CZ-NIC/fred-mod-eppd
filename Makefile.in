CC          = @CC@
CFLAGS      = @CFLAGS@
CPPFLAGS    = @CPPFLAGS@
DEFS        = @DEFS@
LDFLAGS     = @LDFLAGS@
LIBS        = @LIBS@

APR-CONFIG  = @APR_CONFIG@
APU-CONFIG  = @APU_CONFIG@
APXS        = @APXS@
ORBIT-IDL   = @ORBIT_IDL@
PKG-CONFIG  = @PKG_CONFIG@
DOXYGEN     = @DOXYGEN@
IDL         = @IDL@
IDLPREFIX   = @IDLPREFIX@
SCHEMA      = @SCHEMA@
INSTALL     = @INSTALL@
SHELL       = @SHELL@
PKG_STRING  = @PACKAGE_STRING@
PKG_NAME    = @PACKAGE_NAME@
PKG_TARNAME = @PACKAGE_TARNAME@
PKG_VERSION = @PACKAGE_VERSION@

HEADERS   = epp-client.h epp_common.h epp_gen.h epp_parser.h epp_xmlcommon.h unconfig.h
CFILES    = epp-client.c epp_common.c epp_gen.c epp_parser.c epp_test.c epp_xmlcommon.c mod_eppd.c
AUXFILES  = config.h.in configure.ac configure doxy.conf install-sh Makefile.in README ChangeLog

EXECFILES = mod_eppd.so epp_test
IDLOUT    = ${IDLPREFIX}.h ${IDLPREFIX}-common.c ${IDLPREFIX}-stubs.c
OBJS      = epp_common.o epp_xmlcommon.o epp_parser.o epp_gen.o epp-client.o ${IDLPREFIX}-common.o ${IDLPREFIX}-stubs.o
MOD_OBJS  = mod_eppd.o $(OBJS)
ALL_OBJS  = epp_test.o $(MOD_OBJS)
TARDIR    = $(PKG_TARNAME)-$(PKG_VERSION)

ORB_LDFLAGS := $(shell $(PKG-CONFIG) --libs ORBit-2.0)
ORB_CFLAGS  := $(shell $(PKG-CONFIG) --cflags ORBit-2.0)
COS_LDFLAGS:= $(shell $(PKG-CONFIG) --libs ORBit-CosNaming-2.0)
COS_CFLAGS := $(shell $(PKG-CONFIG) --cflags ORBit-CosNaming-2.0)
ORB_LDFLAGS:= $(ORB_LDFLAGS) $(COS_LDFLAGS)
ORB_CFLAGS := $(ORB_CFLAGS) $(COS_CFLAGS)

XML_CFLAGS  := $(shell $(PKG-CONFIG) --cflags libxml-2.0)
XML_LIBS    := $(shell $(PKG-CONFIG) --libs libxml-2.0)

AP_CPPFLAGS := $(shell $(APR-CONFIG) --cppflags)
AP_CFLAGS   := $(shell $(APR-CONFIG) --cflags)
APXS_INCLUDE:= $(shell $(APXS) -q INCLUDEDIR)
APR_INCLUDE := $(shell $(APR-CONFIG) --includes)
APU_INCLUDE := $(shell $(APU-CONFIG) --includes)
AP_INCLUDE  := -I$(APXS_INCLUDE) $(APU_INCLUDE) $(APR_INCLUDE)
AP_CONFDIR  := $(shell $(APXS) -q SYSCONFDIR)

AP_LDFLAGS  := $(shell $(APR-CONFIG) --ldflags)
AP_LIBS     := $(shell $(APR-CONFIG) --libs)

INSTALLDIR  := $(shell $(APXS) -q LIBEXECDIR)

.PHONY: all build install uninstall clean realclean doc dist test
.SUFFIXES:

all: build

build: $(EXECFILES) doc

install: mod_eppd.so
	$(INSTALL) -d $(DESTDIR)/$(INSTALLDIR)
	$(INSTALL) --mode 0644 mod_eppd.so $(DESTDIR)/$(INSTALLDIR)
	$(INSTALL) --mode 0755 -d $(DESTDIR)/$(AP_CONFDIR)/schemas
	@ dir=`dirname $(SCHEMA)`; \
	for i in `ls $$dir/*.xsd`; do \
		$(INSTALL) --mode 0644 $$i $(DESTDIR)/$(AP_CONFDIR)/schemas; \
		echo "Schema $$i installed"; \
	  done

uninstall:
	-rm -f $(DESTDIR)/$(INSTALLDIR)/mod_eppd.so

test: epp_test
	./epp_test -h curlew -t

mod_eppd.so: $(MOD_OBJS)
	$(CC) -Wl,-rpath $(AP_INSTALLDIR) -Bshareable -shared -o mod_eppd.so $(LDFLAGS) $(LIBS) $(AP_LDFLAGS) $(ORB_LDFLAGS) $(AP_LIBS) $(XML_LIBS) $(MOD_OBJS)

mod_eppd.o:	mod_eppd.c epp_parser.h epp_gen.h epp-client.h epp_common.h config.h
	$(CC) -fPIC $(CPPFLAGS) $(CFLAGS) $(AP_CPPFLAGS) $(AP_CFLAGS) $(AP_INCLUDE) $(DEFS) -c mod_eppd.c

epp_xmlcommon.o: epp_xmlcommon.c epp_xmlcommon.h epp_common.h config.h
	$(CC) -fPIC $(CPPFLAGS) $(CFLAGS) $(XML_CFLAGS) $(DEFS) -c epp_xmlcommon.c

epp_parser.o: epp_parser.c epp_parser.h epp_common.h epp_xmlcommon.h config.h
	$(CC) -fPIC $(CPPFLAGS) $(CFLAGS) $(XML_CFLAGS) $(DEFS) -c epp_parser.c

epp_gen.o: epp_gen.c epp_gen.h epp_common.h epp_xmlcommon.h config.h
	$(CC) -fPIC $(CPPFLAGS) $(CFLAGS) $(XML_CFLAGS) $(DEFS) -c epp_gen.c

epp_common.o: epp_common.c epp_common.h config.h
	$(CC) -fPIC $(CPPFLAGS) $(CFLAGS) $(DEFS) -c epp_common.c

epp-client.o: epp-client.c epp-client.h epp_common.h ${IDLPREFIX}.h config.h
	$(CC) -fPIC -include ${IDLPREFIX}.h $(CPPFLAGS) $(CFLAGS) $(ORB_CFLAGS) $(DEFS) -c epp-client.c

${IDLPREFIX}-common.o: ${IDLPREFIX}-common.c ${IDLPREFIX}.h
	$(CC) -fPIC $(CPPFLAGS) $(CFLAGS) $(ORB_CFLAGS) $(DEFS) -c ${IDLPREFIX}-common.c

${IDLPREFIX}-stubs.o: ${IDLPREFIX}-stubs.c ${IDLPREFIX}.h
	$(CC) -fPIC $(CPPFLAGS) $(CFLAGS) $(ORB_CFLAGS) $(DEFS) -c ${IDLPREFIX}-stubs.c

epp_test: epp_test.o $(OBJS)
	$(CC) $(LDFLAGS) $(LIBS) $(ORB_LDFLAGS) $(XML_LIBS) -o epp_test epp_test.o $(OBJS)

epp_test.o: epp_test.c epp_common.h epp_parser.h epp_gen.h epp-client.h $(IDLPREFIX).h config.h
	$(CC) $(CPPFLAGS) $(CFLAGS) $(DEFS) $(ORB_CFLAGS) -c epp_test.c

$(IDLOUT): $(IDL)
	$(ORBIT-IDL) --noskels $(IDL)

clean:
	-rm -f $(ALL_OBJS)
	-rm -f $(IDLOUT)
	-rm -f doxygen.log
	-rm -f $(EXECFILES)
	-rm -fr doc/html
	-rm -f $(TARDIR).tar

realclean: clean
	-rm -rf acconfig.h autom4te.cache configure Makefile config.h config.log config.status

doc: doxy.conf
	@ if test x$(DOXYGEN) = x; then \
		 echo "Doxygen executable not configured."; \
		 echo "Use --with-doc parameter to configure."; \
	   else \
		 $(DOXYGEN) doxy.conf 2>&1 1>&doxygen.log; \
		 echo "index.html is in doc/html directory"; \
		 echo "output from doxygen is in doxygen.log file"; \
	   fi

dist: $(HEADERS) $(CFILES) $(AUXFILES) doc
	@ echo "Creating distribution tar archive for package $(PKG_STRING)."
	@ mkdir -p $(TARDIR)/doc
	@ echo "Bundling source files and build files."
	@ cp $(HEADERS) $(CFILES) $(AUXFILES) $(TARDIR)
	@ echo "Bundling XML schemas."
	@ mkdir $(TARDIR)/schemas
	@ DIR=`dirname $(SCHEMA)`; \
	  for i in `ls $$DIR/*.xsd`; do \
		cp $$i $(TARDIR)/schemas; \
	  done
	@ echo "Bundling documentation."
	@ cp doc/mainpage.h doc/mod_eppd.png $(TARDIR)/doc
	@ cp -r doc/html $(TARDIR)/doc/html
	@ echo "Bundling XML request examples."
	@ mkdir $(TARDIR)/examples
	@ cp -r examples/*.xml $(TARDIR)/examples
	@ echo "Creating tar file."
	tar cvf $(TARDIR).tar $(TARDIR)
	@ rm -rf $(TARDIR)
