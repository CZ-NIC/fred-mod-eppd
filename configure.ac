#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT([mod_eppd], 1.0, [], [mod_eppd])
AC_CONFIG_SRCDIR([mod_eppd.c])

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_EGREP
AC_PROG_AWK

# Checks for libraries.
AC_CHECK_LIB([xml2], [xmlInitGlobals], [], [AC_MSG_ERROR([libxml2 not found])])
AC_CHECK_LIB([ORBit-2], [CORBA_exception_init], [],
			 [AC_MSG_ERROR([orbit2 not found])])

# Checks for header files.
dnl AC_HEADER_STDC
dnl AC_CHECK_HEADERS([stdlib.h string.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
dnl AC_HEADER_TIME

# Checks for library functions.
dnl AC_FUNC_MALLOC
dnl AC_FUNC_REALLOC
dnl AC_CHECK_FUNCS([bzero gettimeofday strdup])

#
# custom checks
#

#
# check apr-config
#
AC_ARG_WITH([apr-config], [AS_HELP_STRING([--with-apr-config],
			[location of apr-config executable])],
			[AC_SUBST([APR_CONFIG], [$with_apr-config])])
if test x"$APR_CONFIG" = x; then
	AC_PATH_PROGS([APR_CONFIG], [apr-config apr-1-config])
fi
AC_CHECK_FILE([$APR_CONFIG], [], [AC_MSG_ERROR(
			   [apr-config executable "$APR_CONFIG" does not exist (use --with-apr-config)])])

#
# check apu-config
#
AC_ARG_WITH([apu-config], [AS_HELP_STRING([--with-apu-config],
			[location of apu-config executable])],
			[AC_SUBST([APU_CONFIG], [$with_apu-config])])
if test x"$APU_CONFIG" = x; then
	AC_PATH_PROGS([APU_CONFIG], [apu-config apu-1-config])
fi
AC_CHECK_FILE([$APU_CONFIG], [], [AC_MSG_ERROR(
			   [apu-config executable "$APU_CONFIG" does not exist (use --with-apu-config)])])

#
# check apxs tool
#
AC_ARG_WITH([apxs], [AS_HELP_STRING([--with-apxs],
			[location of apxs executable])],
			[AC_SUBST([APXS], [$with_apxs])])
if test x"$APXS" = x; then
	AC_PATH_PROGS([APXS], [apxs apxs2])
fi
AC_CHECK_FILE([$APXS], [], [AC_MSG_ERROR(
			   [apxs executable "$APXS" was not found (use --with-apxs)])])

#
# check orbit-idl-2
#
AC_ARG_WITH([orbit-idl], [AS_HELP_STRING([--with-orbit-idl],
			[location of orbit-idl-2 executable])],
			[AC_SUBST([ORBIT_IDL], [$with_orbit-idl])])
if test x"$ORBIT_IDL" = x; then
	AC_PATH_PROG([ORBIT_IDL], [orbit-idl-2])
fi
AC_CHECK_FILE([$ORBIT_IDL], [], [AC_MSG_ERROR(
			   [orbit-idl-2 executable "$ORBIT_IDL" does not exist (use --with-orbit-idl)])])

#
# check pkg-config
#
AC_ARG_WITH([pkg-config], [AS_HELP_STRING([--with-pkg-config],
			[location of pkg-config executable])],
			[AC_SUBST([PKG_CONFIG], [$with_pkg-config])])
if test x"$PKG_CONFIG" = x; then
	AC_PATH_PROG([PKG_CONFIG], [pkg-config])
fi
AC_CHECK_FILE([$PKG_CONFIG], [], [AC_MSG_ERROR(
			   [pkg-config executable "$PKG_CONFIG" does not exist (use --with-pkg-config)])])

#
# check IDL file
#
AC_ARG_WITH([idl], [AS_HELP_STRING([--with-idl],
			[location of idl file containing EPP interface [idl/EPP.idl]])],
			[AC_SUBST([IDL], [$with_idl])],
			[AC_SUBST([IDL], [idl/EPP.idl])])
AC_CHECK_FILE([$IDL], [], [AC_MSG_ERROR(
			   [idl file "$IDL" does not exist (use --with-idl)])])
# determine prefix of files generated by idl compiler
idlprefix=`basename $IDL .idl`
AC_SUBST([IDLPREFIX], [$idlprefix])

#
# check schema file
#
AC_ARG_WITH([schema], [AS_HELP_STRING([--with-schema],
			[xml schema defining EPP protocol [schemas/all-1.0.xsd]])],
			[AC_SUBST([SCHEMA], [$with_schema])],
			[AC_SUBST([SCHEMA], [schemas/all-1.0.xsd])])
AC_CHECK_FILE([$SCHEMA], [], [AC_MSG_ERROR(
			   [xml schema "$SCHEMA" does not exist (use --with-schema)])])

#
# check doc (implying doxygen)
#
AC_ARG_WITH([doc], [AS_HELP_STRING([--with-doc],
			[location of doxygen executable used for html documentation])],
			[AC_SUBST([DOXYGEN], [$with_doc])])
if test x"$DOXYGEN" = x; then
	AC_PATH_PROG([DOXYGEN], [doxygen])
fi
AC_CHECK_FILE([$DOXYGEN], [], [AC_MSG_NOTICE(
			   [doxygen executable "$DOXYGEN" not found, you will not be able to generate html documentation])])

# check svn revision (if available)
#
AC_SUBST([SVNREV], [unknown])
AC_MSG_NOTICE([trying to get svn revision])
AC_PATH_PROG([SVN], [svn], [false])
if test "$SVN" != "false"; then
	AC_CHECK_FILE([.svn], [AC_SUBST([SVNREV],
				  [`$SVN info | $EGREP Revision |  $AWK '{ print $2;};'`])])
	AC_MSG_CHECKING([SVN revision])
	AC_MSG_RESULT([$SVNREV])
else
	AC_MSG_CHECKING([SVN revision])
	AC_MSG_RESULT([$SVNREV])
fi
AC_DEFINE_UNQUOTED([SVN_REV], [["]$SVNREV["]])

# finalization
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
