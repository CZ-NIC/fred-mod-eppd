#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
# vim: set ts=4 sw=4:

AC_PREREQ(2.59)
AC_INIT([mod_eppd], 1.5, [], [mod_eppd])
AC_CONFIG_SRCDIR([mod_eppd.c])

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_EGREP
AC_PROG_AWK

#
# check pkg-config
#
AC_ARG_WITH([pkg-config], [AS_HELP_STRING([--with-pkg-config],
			[location of pkg-config executable])],
			[PKG_CONFIG=$withval])
if test x"$PKG_CONFIG" = x; then
	AC_PATH_PROG([PKG_CONFIG], [pkg-config])
fi
AC_CHECK_FILE([$PKG_CONFIG], [], [AC_MSG_ERROR(
			   [pkg-config executable "$PKG_CONFIG" does not exist (use --with-pkg-config)])])

# Checks for libraries.
# backup flags which get overwritten during tests
BK_CFLAGS=$CPPFLAGS
BK_LDFLAGS=$LDFLAGS

# Check for libxml2 library and header files
XML_CFLAGS=[`$PKG_CONFIG --cflags libxml-2.0`]
XML_LDFLAGS=[`$PKG_CONFIG --libs libxml-2.0`]
CPPFLAGS=$XML_CFLAGS
LDFLAGS=$XML_LDFLAGS
AC_CHECK_LIB([xml2], [xmlInitGlobals], [], [AC_MSG_ERROR([libxml2 not found])])
AC_CHECK_HEADER([libxml/parser.h], [],
				[AC_MSG_ERROR([missing libxml header files])])
AC_SUBST([XML_CFLAGS])
AC_SUBST([XML_LDFLAGS])

# Checks for devel libraries.
AC_CHECK_HEADER([libxml2/libxml/xmlmodule.h], [], 
    [AC_MSG_ERROR([Missing xmlmodule.h header file. Type: sudo apt-get install libxml2-dev])])
AC_CHECK_HEADER([apr-0/apr.h], [], 
    [AC_MSG_ERROR([Missing apr.h header file. Type: sudo apt-get install libapr0-dev])])
AC_CHECK_HEADER([apache-1.3/httpd.h], [], 
    [AC_MSG_WARN([Probably missing httpd.h header file. Type: sudo apt-get install apache-dev])])


# Check for ORBit2 library and header files
ORB_CFLAGS=[`$PKG_CONFIG --cflags ORBit-2.0 ORBit-CosNaming-2.0`]
ORB_LDFLAGS=[`$PKG_CONFIG --libs ORBit-2.0 ORBit-CosNaming-2.0`]
CPPFLAGS=$ORB_CFLAGS
LDFLAGS=$ORB_LDFLAGS
AC_CHECK_LIB([ORBit-2], [CORBA_exception_init], [],
			 [AC_MSG_ERROR([orbit2 not found])])
AC_CHECK_HEADER([orbit/orbit.h], [],
				[AC_MSG_ERROR([missing orbit2 header files])])
AC_CHECK_HEADER([ORBitservices/CosNaming.h], [],
				[AC_MSG_ERROR([missing orbit2 cosnaming header files])])
AC_SUBST([ORB_CFLAGS])
AC_SUBST([ORB_LDFLAGS])

# Check for openssl library and header files
AC_CHECK_LIB([ssl], [X509_digest], [], [AC_MSG_ERROR([openssl not found])])
AC_CHECK_HEADER([openssl/ssl.h], [],
				[AC_MSG_ERROR([missing openssl header files])])

#
# check apr-config
#
AC_ARG_WITH([apr-config], [AS_HELP_STRING([--with-apr-config],
			[location of apr-config executable])],
			[APR_CONFIG=$withval])
if test x"$APR_CONFIG" = x; then
	AC_PATH_PROGS([APR_CONFIG], [apr-config apr-1-config])
fi
AC_CHECK_FILE([$APR_CONFIG], [], [AC_MSG_ERROR(
			   [apr-config executable "$APR_CONFIG" does not exist (use --with-apr-config)])])

#
# check apxs tool, prefer apxs2
#
AC_ARG_WITH([apxs2], [AS_HELP_STRING([--with-apxs],
			[location of apxs executable])], [APXS=$withval])
if test x"$APXS" = x; then
	AC_PATH_PROGS([APXS], [apxs2 apxs])
fi
AC_CHECK_FILE([$APXS], [], [AC_MSG_ERROR(
			   [apxs executable "$APXS" was not found (use --with-apxs)])])

AP_CONFDIR=`$APXS -q SYSCONFDIR`
INSTALLDIR=`$APXS -q LIBEXECDIR`
AP_CPPFLAGS="-I`$APXS -q INCLUDEDIR` `$APR_CONFIG --includes --cppflags`"
AP_CFLAGS="`$APXS -q CFLAGS` `$APR_CONFIG --cflags`"
AP_LDFLAGS=`$APR_CONFIG --ldflags --libs`
AC_SUBST([AP_CONFDIR])
AC_SUBST([INSTALLDIR])
AC_SUBST([AP_CPPFLAGS])
AC_SUBST([AP_CFLAGS])
AC_SUBST([AP_LDFLAGS])

# restore original content of CFLAGS and LDFLAGS
CPPFLAGS=$BK_CFLAGS
LDFLAGS=$BK_LDFLAGS

#
# check orbit-idl-2
#
AC_ARG_WITH([orbit-idl], [AS_HELP_STRING([--with-orbit-idl],
			[location of orbit-idl-2 executable])],
			[AC_SUBST([ORBIT_IDL], [$withval])])
if test x"$ORBIT_IDL" = x; then
	AC_PATH_PROG([ORBIT_IDL], [orbit-idl-2])
fi
AC_CHECK_FILE([$ORBIT_IDL], [], [AC_MSG_ERROR(
			   [orbit-idl-2 executable "$ORBIT_IDL" does not exist (use --with-orbit-idl)])])

#
# check IDL file
#
AC_ARG_WITH([idl], [AS_HELP_STRING([--with-idl],
			[location of idl file containing EPP interface [idl/EPP.idl]])],
			[AC_SUBST([IDL], [$withval])],
			[AC_SUBST([IDL], [idl/EPP.idl])])
AC_CHECK_FILE([$IDL], [], [AC_MSG_ERROR(
			   [idl file "$IDL" does not exist (use --with-idl)])])
# determine prefix of files generated by idl compiler
idlprefix=`basename $IDL .idl`
AC_SUBST([IDLPREFIX], [$idlprefix])

#
# check schema file
#
AC_ARG_WITH([schema], [AS_HELP_STRING([--with-schema],
			[xml schema defining EPP protocol [schemas/all-1.4.xsd]])],
			[AC_SUBST([SCHEMA], [$withval])],
			[AC_SUBST([SCHEMA], [schemas/all-1.4.xsd])])
AC_CHECK_FILE([$SCHEMA], [], [AC_MSG_ERROR(
			   [xml schema "$SCHEMA" does not exist (use --with-schema)])])

#
# check doc (implying doxygen)
#
AC_ARG_WITH([doc], [AS_HELP_STRING([--with-doc],
			[location of doxygen executable used for html documentation])],
			[AC_SUBST([DOXYGEN], [$withval])])
if test x"$DOXYGEN" = x; then
	AC_PATH_PROG([DOXYGEN], [doxygen])
fi
AC_CHECK_FILE([$DOXYGEN], [], [AC_MSG_NOTICE(
			   [doxygen executable "$DOXYGEN" not found, you will not be able to generate html documentation])])

#
# check svn revision (if available)
#
AC_SUBST([SVNREV], [unknown])
AC_MSG_NOTICE([trying to get svn revision])
AC_PATH_PROG([SVN], [svn], [false])
if test "$SVN" != "false"; then
	AC_CHECK_FILE([.svn], [AC_SUBST([SVNREV],
				  [`$SVN info | $EGREP Revision |  $AWK '{ print $2;};'`])])
	AC_MSG_CHECKING([SVN revision])
	AC_MSG_RESULT([$SVNREV])
else
	AC_MSG_CHECKING([SVN revision])
	AC_MSG_RESULT([$SVNREV])
fi
AC_DEFINE_UNQUOTED([SVN_REV], [["]$SVNREV["]], [SVN revision])

#
# check perf option
#
AC_ARG_ENABLE([profiling],
			  AS_HELP_STRING([--enable-profiling], [enable simple profiling support]),
			  profiling=$enableval)
if test "$profiling" = "yes"; then
	AC_DEFINE([EPP_PERF], [1], [Profiling support])
fi

# finalization
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
